diff --git a/node_modules/yeoman-option-or-prompt/index.js b/node_modules/yeoman-option-or-prompt/index.js
index d7fd869..d159777 100644
--- a/node_modules/yeoman-option-or-prompt/index.js
+++ b/node_modules/yeoman-option-or-prompt/index.js
@@ -1,6 +1,6 @@
 'use strict';
 
-module.exports = function(prompts) {
+module.exports = async function(prompts) {
   // This method will only show prompts that haven't been supplied as options. This makes the generator more composable.
   const filteredPrompts = [];
   const props = new Map();
@@ -18,33 +18,44 @@ module.exports = function(prompts) {
   }, this);
 
   if (filteredPrompts.length) {
-    return this.prompt(filteredPrompts).then(function mergeProps(mergeProps) {
-      // Merge mergeProps into props/
-      Object.assign(props, mergeProps);
-      return props;
-    });
+    var runPrompts = async () => {
+      for (let i = 0; i < filteredPrompts.length; i++) {
+        let filteredPrompt = filteredPrompts[i];
+        var isWhenConditionFulfilled = typeof filteredPrompt.when !== 'function' ||
+          (typeof filteredPrompt.when === 'function' && filteredPrompt.when(props));
+        if (isWhenConditionFulfilled) {
+          delete filteredPrompt.when;
+          await new Promise(async resolve => {
+            const answers = await this.prompt(filteredPrompt);
+            Object.assign(props, answers);
+            resolve();
+          });
+        }
+      }
+    };
+    await runPrompts.bind(this)();
   }
 
   // No prompting required call the callback right away.
-  return Promise.resolve(props);
+      return Promise.resolve(props);
 };
 
 function normalize(option){
-    // TODO: 
-    // accept other types
+  // TODO:
+  // accept other types
 
-    if (typeof option === 'boolean') {
-      return option;
-    }
+  if (typeof option === 'boolean') {
+    return option;
+  }
 
-    if (typeof option === 'string'){
-      let lc = option.toLowerCase();
+  if (typeof option === 'string'){
+    let lc = option.toLowerCase();
 
-      // it's a boolean in string format
-      if (lc === 'true' || lc === 'false') {
-        return (lc === 'true');
-      } else {
-        return option;
-      }
+    // it's a boolean in string format
+    if (lc === 'true' || lc === 'false') {
+      return (lc === 'true');
+    } else {
+      return option;
     }
+  }
 }
